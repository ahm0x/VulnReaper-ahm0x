from Config.Util import *
from Config.Config import *
try:
    import requests
    import json
    import re
    from bs4 import BeautifulSoup
except Exception as e:
    ErrorModule(e)

Title("Exploit Database Search")

try:
    def search_exploitdb(query, exploit_type="all"):
        """Search Exploit-DB for exploits"""
        try:
            # Simulate Exploit-DB search (in real scenario, use their API)
            exploits = []
            
            # Common exploits database (simplified)
            exploit_database = {
                'Apache': [
                    {'id': 'EDB-50383', 'title': 'Apache HTTP Server 2.4.49 - Path Traversal', 'type': 'webapps', 'platform': 'linux'},
                    {'id': 'EDB-50406', 'title': 'Apache HTTP Server 2.4.50 - Remote Code Execution', 'type': 'webapps', 'platform': 'linux'},
                ],
                'nginx': [
                    {'id': 'EDB-49584', 'title': 'nginx 1.20.0 - Denial of Service', 'type': 'dos', 'platform': 'linux'},
                ],
                'OpenSSH': [
                    {'id': 'EDB-45939', 'title': 'OpenSSH 7.7 - Username Enumeration', 'type': 'remote', 'platform': 'linux'},
                    {'id': 'EDB-45233', 'title': 'OpenSSH < 6.6 SFTP - Command Execution', 'type': 'remote', 'platform': 'linux'},
                ],
                'MySQL': [
                    {'id': 'EDB-49914', 'title': 'MySQL 8.0.27 - Privilege Escalation', 'type': 'local', 'platform': 'linux'},
                ],
                'vsftpd': [
                    {'id': 'EDB-17491', 'title': 'vsftpd 2.3.4 - Backdoor Command Execution', 'type': 'remote', 'platform': 'unix'},
                ],
                'Windows': [
                    {'id': 'EDB-51026', 'title': 'Microsoft Windows - Local Privilege Escalation', 'type': 'local', 'platform': 'windows'},
                    {'id': 'EDB-50847', 'title': 'Windows Print Spooler - Remote Code Execution', 'type': 'remote', 'platform': 'windows'},
                ],
                'Linux': [
                    {'id': 'EDB-51181', 'title': 'Linux Kernel - Local Privilege Escalation', 'type': 'local', 'platform': 'linux'},
                    {'id': 'EDB-50808', 'title': 'Sudo 1.8.31 - Root Privilege Escalation', 'type': 'local', 'platform': 'linux'},
                ]
            }
            
            # Search in database
            for service, service_exploits in exploit_database.items():
                if query.lower() in service.lower():
                    exploits.extend(service_exploits)
            
            # Filter by type if specified
            if exploit_type != "all":
                exploits = [exp for exp in exploits if exp['type'] == exploit_type]
            
            return exploits
        except Exception as e:
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} Error searching exploits: {white}{e}")
            return []

    def search_metasploit_modules(query):
        """Search for Metasploit modules"""
        try:
            # Common Metasploit modules (simplified database)
            msf_modules = {
                'Apache': [
                    {'name': 'exploit/multi/http/apache_mod_cgi_bash_env_exec', 'rank': 'Excellent', 'description': 'Apache mod_cgi Bash Environment Variable Code Injection'},
                    {'name': 'exploit/linux/http/apache_continuum_cmd_exec', 'rank': 'Excellent', 'description': 'Apache Continuum Arbitrary Command Execution'},
                ],
                'SSH': [
                    {'name': 'auxiliary/scanner/ssh/ssh_version', 'rank': 'Normal', 'description': 'SSH Version Scanner'},
                    {'name': 'auxiliary/scanner/ssh/ssh_login', 'rank': 'Normal', 'description': 'SSH Login Check Scanner'},
                ],
                'FTP': [
                    {'name': 'exploit/unix/ftp/vsftpd_234_backdoor', 'rank': 'Excellent', 'description': 'VSFTPD v2.3.4 Backdoor Command Execution'},
                    {'name': 'auxiliary/scanner/ftp/ftp_version', 'rank': 'Normal', 'description': 'FTP Version Scanner'},
                ],
                'SMB': [
                    {'name': 'exploit/windows/smb/ms17_010_eternalblue', 'rank': 'Average', 'description': 'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption'},
                    {'name': 'auxiliary/scanner/smb/smb_version', 'rank': 'Normal', 'description': 'SMB Version Detection'},
                ],
                'MySQL': [
                    {'name': 'auxiliary/scanner/mysql/mysql_version', 'rank': 'Normal', 'description': 'MySQL Server Version Enumeration'},
                    {'name': 'auxiliary/scanner/mysql/mysql_login', 'rank': 'Normal', 'description': 'MySQL Login Utility'},
                ]
            }
            
            modules = []
            for service, service_modules in msf_modules.items():
                if query.lower() in service.lower():
                    modules.extend(service_modules)
            
            return modules
        except Exception as e:
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} Error searching Metasploit modules: {white}{e}")
            return []

    def generate_exploit_report(query, exploits, msf_modules):
        """Generate comprehensive exploit report"""
        report_file = os.path.join(tool_path, "1-Output", "ExploitSearch", f"exploit_report_{query}_{int(time.time())}.txt")
        os.makedirs(os.path.dirname(report_file), exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(f"# Exploit Database Search Report\n")
            f.write(f"# Query: {query}\n")
            f.write(f"# Date: {current_time_day_hour()}\n")
            f.write(f"# Total Exploits Found: {len(exploits)}\n")
            f.write(f"# Total MSF Modules Found: {len(msf_modules)}\n\n")
            
            f.write("=" * 80 + "\n")
            f.write("EXPLOIT-DB RESULTS\n")
            f.write("=" * 80 + "\n")
            
            for exploit in exploits:
                f.write(f"ID: {exploit['id']}\n")
                f.write(f"Title: {exploit['title']}\n")
                f.write(f"Type: {exploit['type']}\n")
                f.write(f"Platform: {exploit['platform']}\n")
                f.write(f"URL: https://www.exploit-db.com/exploits/{exploit['id'].replace('EDB-', '')}\n")
                f.write("-" * 50 + "\n")
            
            f.write("\n" + "=" * 80 + "\n")
            f.write("METASPLOIT MODULES\n")
            f.write("=" * 80 + "\n")
            
            for module in msf_modules:
                f.write(f"Module: {module['name']}\n")
                f.write(f"Rank: {module['rank']}\n")
                f.write(f"Description: {module['description']}\n")
                f.write(f"Usage: use {module['name']}\n")
                f.write("-" * 50 + "\n")
        
        return report_file

    Slow(f"""{virus_banner}
 {BEFORE}01{AFTER}{white} Search by service name
 {BEFORE}02{AFTER}{white} Search by CVE number
 {BEFORE}03{AFTER}{white} Search by platform
 {BEFORE}04{AFTER}{white} Browse by exploit type
    """)

    choice = input(f"{BEFORE + current_time_hour() + AFTER} {INPUT} Search type -> {reset}")
    
    if choice in ['1', '01']:
        query = input(f"{BEFORE + current_time_hour() + AFTER} {INPUT} Service name (e.g., Apache, SSH, MySQL) -> {reset}")
        Censored(query)
        
    elif choice in ['2', '02']:
        cve_number = input(f"{BEFORE + current_time_hour() + AFTER} {INPUT} CVE number (e.g., CVE-2021-44228) -> {reset}")
        query = cve_number
        
    elif choice in ['3', '03']:
        platform = input(f"{BEFORE + current_time_hour() + AFTER} {INPUT} Platform (linux/windows/unix) -> {reset}")
        query = platform
        
    elif choice in ['4', '04']:
        print(f"""
 {BEFORE}01{AFTER}{white} Remote exploits
 {BEFORE}02{AFTER}{white} Local exploits
 {BEFORE}03{AFTER}{white} Web application exploits
 {BEFORE}04{AFTER}{white} Denial of Service
        """)
        
        exploit_type_choice = input(f"{BEFORE + current_time_hour() + AFTER} {INPUT} Exploit type -> {reset}")
        type_map = {'1': 'remote', '01': 'remote', '2': 'local', '02': 'local', 
                   '3': 'webapps', '03': 'webapps', '4': 'dos', '04': 'dos'}
        
        exploit_type = type_map.get(exploit_type_choice, 'all')
        query = input(f"{BEFORE + current_time_hour() + AFTER} {INPUT} Search term -> {reset}")
        
    else:
        ErrorChoice()

    print(f"{BEFORE + current_time_hour() + AFTER} {WAIT} Searching exploits for: {white}{query}")
    
    # Search exploits
    exploits = search_exploitdb(query, exploit_type if 'exploit_type' in locals() else 'all')
    msf_modules = search_metasploit_modules(query)
    
    print(f"\n{BEFORE + current_time_hour() + AFTER} {INFO} Found {white}{len(exploits)}{red} exploits in Exploit-DB")
    print(f"{BEFORE + current_time_hour() + AFTER} {INFO} Found {white}{len(msf_modules)}{red} Metasploit modules")
    
    if exploits:
        print(f"\n{BEFORE + current_time_hour() + AFTER} {INFO} Exploit-DB Results:")
        for exploit in exploits[:10]:  # Show first 10
            print(f"  {white}{exploit['id']}{red}: {exploit['title']} [{exploit['type']}]")
    
    if msf_modules:
        print(f"\n{BEFORE + current_time_hour() + AFTER} {INFO} Metasploit Modules:")
        for module in msf_modules[:10]:  # Show first 10
            print(f"  {white}{module['name']}{red} [{module['rank']}]")
    
    if exploits or msf_modules:
        report_file = generate_exploit_report(query, exploits, msf_modules)
        print(f"\n{BEFORE + current_time_hour() + AFTER} {INFO} Detailed report saved to: {white}{report_file}")
    else:
        print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} No exploits found for: {white}{query}")

    Continue()
    Reset()
except Exception as e:
    Error(e)