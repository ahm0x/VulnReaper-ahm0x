#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
VulnReaper by ahm0x - Report Generator
Professional security report generation
"""

import os
import json
from datetime import datetime
from jinja2 import Template
from Config.Util import *
from Config.Config import *

class ReportGenerator:
    """Professional security report generator"""
    
    def __init__(self):
        self.report_templates = {
            'executive': self.get_executive_template(),
            'technical': self.get_technical_template(),
            'vulnerability': self.get_vulnerability_template()
        }
    
    def get_executive_template(self):
        """Executive summary report template"""
        return """
# {{ report_title }}
## Executive Summary Report

**Generated by:** {{ tool_name }} {{ version }}
**Date:** {{ date }}
**Target:** [REDACTED FOR SECURITY]
**Scan Duration:** {{ scan_duration }} seconds

---

## 🎯 Executive Summary

This security assessment was conducted using VulnReaper by ahm0x, a professional cybersecurity framework designed for authorized penetration testing and bug bounty research.

### Key Findings

- **Subdomains Discovered:** {{ subdomains_count }}
- **Live Hosts Identified:** {{ live_hosts_count }}
- **Open Ports Found:** {{ open_ports_count }}
- **Vulnerabilities Detected:** {{ vulnerabilities_count }}

### Risk Assessment

{% if critical_vulns > 0 %}
🔴 **CRITICAL RISK:** {{ critical_vulns }} critical vulnerabilities require immediate attention.
{% elif high_vulns > 0 %}
🟠 **HIGH RISK:** {{ high_vulns }} high-risk vulnerabilities identified.
{% elif medium_vulns > 0 %}
🟡 **MEDIUM RISK:** {{ medium_vulns }} medium-risk issues found.
{% else %}
🟢 **LOW RISK:** No critical vulnerabilities detected in automated scan.
{% endif %}

### Recommendations

1. **Immediate Actions Required:**
   - Review and patch all identified vulnerabilities
   - Implement proper access controls
   - Update all services to latest versions

2. **Long-term Security Improvements:**
   - Establish vulnerability management program
   - Implement continuous security monitoring
   - Conduct regular security assessments

---

*This report was generated for authorized security testing purposes only.*
"""
    
    def get_technical_template(self):
        """Technical detailed report template"""
        return """
# {{ report_title }}
## Technical Security Assessment Report

**Generated by:** {{ tool_name }} {{ version }}
**Date:** {{ date }}
**Target:** [REDACTED FOR SECURITY]
**Methodology:** Automated reconnaissance and vulnerability assessment

---

## 🔍 Reconnaissance Results

### Subdomain Enumeration
{% if subdomains %}
**Total Subdomains Found:** {{ subdomains|length }}

{% for subdomain in subdomains %}
- {{ subdomain }}
{% endfor %}
{% else %}
No subdomains discovered during automated enumeration.
{% endif %}

### Live Host Detection
{% if live_hosts %}
**Total Live Hosts:** {{ live_hosts|length }}

{% for host in live_hosts %}
- {{ host }}
{% endfor %}
{% else %}
No live hosts detected.
{% endif %}

### Port Scanning Results
{% if port_results %}
{% for host, ports in port_results.items() %}
**{{ host }}:**
{% for port, service_info in ports.items() %}
- Port {{ port }}/tcp: {{ service_info.service }} {{ service_info.version }}
  {% if service_info.banner %}
  Banner: {{ service_info.banner[:100] }}...
  {% endif %}
{% endfor %}

{% endfor %}
{% else %}
No open ports detected.
{% endif %}

### Technology Stack
{% if technologies %}
{% for tech in technologies %}
- {{ tech }}
{% endfor %}
{% else %}
No specific technologies detected.
{% endif %}

---

## 🚨 Vulnerability Assessment

{% if vulnerabilities %}
{% for vuln in vulnerabilities %}
### {{ vuln.title }}
**Severity:** {{ vuln.severity }}
**Description:** {{ vuln.description }}
**Affected Service:** {{ vuln.service }}
{% if vuln.port %}**Port:** {{ vuln.port }}{% endif %}

**Recommendation:** {{ vuln.recommendation }}

---
{% endfor %}
{% else %}
No vulnerabilities detected in automated scan. Manual testing recommended.
{% endif %}

## 🛠️ Tools and Methodology

This assessment utilized the following VulnReaper modules:
- Advanced Subdomain Enumeration
- Multi-threaded Port Scanning
- Service Version Detection
- Technology Stack Analysis
- Automated Vulnerability Assessment

---

*Report generated by VulnReaper by ahm0x - Professional Cybersecurity Framework*
"""
    
    def get_vulnerability_template(self):
        """Vulnerability-focused report template"""
        return """
# Vulnerability Assessment Report
## {{ report_title }}

**Assessment Date:** {{ date }}
**Framework:** {{ tool_name }} {{ version }}
**Target Scope:** [REDACTED FOR SECURITY]

---

## 🎯 Vulnerability Summary

| Severity | Count | Percentage |
|----------|-------|------------|
| Critical | {{ critical_vulns }} | {{ critical_percentage }}% |
| High     | {{ high_vulns }} | {{ high_percentage }}% |
| Medium   | {{ medium_vulns }} | {{ medium_percentage }}% |
| Low      | {{ low_vulns }} | {{ low_percentage }}% |
| **Total** | **{{ total_vulns }}** | **100%** |

---

## 🚨 Critical Vulnerabilities

{% for vuln in critical_vulnerabilities %}
### {{ vuln.id }} - {{ vuln.title }}
**CVSS Score:** {{ vuln.cvss_score }}
**Affected Service:** {{ vuln.service }} (Port {{ vuln.port }})

**Description:**
{{ vuln.description }}

**Impact:**
{{ vuln.impact }}

**Remediation:**
{{ vuln.remediation }}

---
{% endfor %}

## 🔶 High Risk Vulnerabilities

{% for vuln in high_vulnerabilities %}
### {{ vuln.id }} - {{ vuln.title }}
**CVSS Score:** {{ vuln.cvss_score }}
**Affected Service:** {{ vuln.service }}

**Description:** {{ vuln.description }}
**Remediation:** {{ vuln.remediation }}

---
{% endfor %}

## 📊 Risk Analysis

### Attack Surface
- **External Services:** {{ external_services_count }}
- **Web Applications:** {{ web_apps_count }}
- **Database Services:** {{ database_services_count }}
- **Administrative Interfaces:** {{ admin_interfaces_count }}

### Security Posture
{% if security_score >= 80 %}
🟢 **GOOD:** Strong security posture with minimal vulnerabilities.
{% elif security_score >= 60 %}
🟡 **MODERATE:** Acceptable security with room for improvement.
{% elif security_score >= 40 %}
🟠 **POOR:** Significant security issues requiring attention.
{% else %}
🔴 **CRITICAL:** Severe security weaknesses requiring immediate action.
{% endif %}

---

## 🛡️ Remediation Roadmap

### Immediate Actions (0-7 days)
1. Patch all critical vulnerabilities
2. Disable unnecessary services
3. Implement emergency monitoring

### Short-term Actions (1-4 weeks)
1. Address high-risk vulnerabilities
2. Implement security controls
3. Update security policies

### Long-term Actions (1-6 months)
1. Establish vulnerability management program
2. Implement continuous monitoring
3. Conduct regular assessments

---

*This assessment was conducted using VulnReaper by ahm0x for authorized security testing.*
"""
    
    def generate_report(self, report_type, data, output_format='txt'):
        """Generate security report"""
        try:
            if report_type not in self.report_templates:
                raise ValueError(f"Unknown report type: {report_type}")
            
            template_content = self.report_templates[report_type]
            template = Template(template_content)
            
            # Prepare template data
            template_data = {
                'report_title': data.get('title', 'Security Assessment Report'),
                'tool_name': name_tool,
                'version': version_tool,
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'scan_duration': data.get('scan_duration', 0),
                'subdomains_count': len(data.get('subdomains', [])),
                'live_hosts_count': len(data.get('live_hosts', [])),
                'open_ports_count': data.get('open_ports_count', 0),
                'vulnerabilities_count': len(data.get('vulnerabilities', [])),
                'subdomains': data.get('subdomains', []),
                'live_hosts': data.get('live_hosts', []),
                'port_results': data.get('port_results', {}),
                'technologies': data.get('technologies', []),
                'vulnerabilities': data.get('vulnerabilities', []),
                'critical_vulns': len([v for v in data.get('vulnerabilities', []) if v.get('severity') == 'Critical']),
                'high_vulns': len([v for v in data.get('vulnerabilities', []) if v.get('severity') == 'High']),
                'medium_vulns': len([v for v in data.get('vulnerabilities', []) if v.get('severity') == 'Medium']),
                'low_vulns': len([v for v in data.get('vulnerabilities', []) if v.get('severity') == 'Low']),
            }
            
            # Calculate percentages
            total_vulns = template_data['critical_vulns'] + template_data['high_vulns'] + template_data['medium_vulns'] + template_data['low_vulns']
            if total_vulns > 0:
                template_data['critical_percentage'] = round((template_data['critical_vulns'] / total_vulns) * 100, 1)
                template_data['high_percentage'] = round((template_data['high_vulns'] / total_vulns) * 100, 1)
                template_data['medium_percentage'] = round((template_data['medium_vulns'] / total_vulns) * 100, 1)
                template_data['low_percentage'] = round((template_data['low_vulns'] / total_vulns) * 100, 1)
            else:
                template_data['critical_percentage'] = 0
                template_data['high_percentage'] = 0
                template_data['medium_percentage'] = 0
                template_data['low_percentage'] = 0
            
            template_data['total_vulns'] = total_vulns
            
            # Render report
            report_content = template.render(**template_data)
            
            # Save report
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{report_type}_report_{timestamp}.{output_format}"
            report_path = os.path.join(tool_path, "1-Output", "Reports", filename)
            os.makedirs(os.path.dirname(report_path), exist_ok=True)
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report_content)
            
            return report_path
            
        except Exception as e:
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} Report generation failed: {white}{e}")
            return None
    
    def generate_json_report(self, data):
        """Generate JSON format report for API consumption"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"vulnreaper_data_{timestamp}.json"
            report_path = os.path.join(tool_path, "1-Output", "Reports", filename)
            os.makedirs(os.path.dirname(report_path), exist_ok=True)
            
            # Prepare JSON data
            json_data = {
                'metadata': {
                    'tool': name_tool,
                    'version': version_tool,
                    'generated_at': datetime.now().isoformat(),
                    'target_hash': hashlib.sha256(data.get('target', '').encode()).hexdigest()[:16]
                },
                'scan_results': {
                    'subdomains': data.get('subdomains', []),
                    'live_hosts': data.get('live_hosts', []),
                    'port_results': data.get('port_results', {}),
                    'technologies': data.get('technologies', []),
                    'vulnerabilities': data.get('vulnerabilities', [])
                },
                'statistics': {
                    'subdomains_count': len(data.get('subdomains', [])),
                    'live_hosts_count': len(data.get('live_hosts', [])),
                    'open_ports_count': data.get('open_ports_count', 0),
                    'vulnerabilities_count': len(data.get('vulnerabilities', [])),
                    'scan_duration': data.get('scan_duration', 0)
                }
            }
            
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, indent=2, ensure_ascii=False)
            
            return report_path
            
        except Exception as e:
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} JSON report generation failed: {white}{e}")
            return None

# Global report generator instance
report_generator = ReportGenerator()